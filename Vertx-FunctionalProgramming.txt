					Eclipse Vert.x
..............................................................................................

Foundation for Vertx Tech Stack:
...............................

1.Functional programming
2.Reactive Programming

...........................................................................................
				What is functional Programming?

 Programming with Mathmetical Functions
 f::int -> Bool

-Functional programming is one the programming paradigm.


Programming paradigm: Way to build
->Object oriented
->Procedural oriented
->Functional Programming
->Event Driven Programming
->Reactive Programming
etc.....
............................................................................................
............................................................................................
	                       Object Oriented Principles
..........................................................................................
1.Abstraction
2.Encapsulation
3.Hierarchy
4.Typing
5.Modularity
----------------------
6.Concurrency
7.Persistency
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
OO Languages.
The language which follows the OO the first 5 Principles : Object Oriented Programming language
C++,Java,C#....

Object orintend vs Object based:
...............................
The language which does not follow all the first 5 principles, follows only parital principles those languages are called  "Object based language" -  javascript.
..........................................................................................

Functional Programming:
   Functional programming is one of the oldest programming model. This is first Programming Model.

History of functional Programming
.................................

Before functional programming ; why functional programming was created?

In 1930,The scientist called "Alan Turing" : Turing Machine ->State Machine
    
-Abstract computing machine (abstract computer) : 
    it is mathematical abstraction for storing , processing data,read (state).

State Machine: 
  It is mathematical abstraction of "How to store state in memory and manipulate
  that memory".
 eg 
  int a =10; ----> a's memory address--->1024 and 10 

 State mutations:
   a++ -> 11-------What is memory address of 11? 1024.



drawbacks of turing machine

1.old values can't be tracked , same memory addr is overriden : Time travel

After, 1970 - Concurrency--multi process -- multi threading

multi state mutation will lead
1.data corruption.
   ->Mutx - Lock
  
Lock will lead another problems
  -Blocking
  -what if thread takes more time--->waiting--performance
  -Thread dead locking


Solution to Turning Machine:
.............................

Lambda Calculus:

  It is another mathematical approach like state machine to represent state in 
  memory and mutate it.
    Lambda calculus (also written as Î»-calculus) is a formal system in mathematical
logic for expressing computation based on function abstraction and application using variable binding and substitution.

Lambda Calculus invented by The "Alonzo Church" , Who was PHD student of "Alan Turning"..
.............................................................................................
				Lambda Calculs and programming languages


The programming language which follows lambda principles those languages are called "Functional programming".

Most powerfull functional programming languages

1.LISP
2.CommonLisp
3.Haskell

Java Dialects: Runs on Jvm

1.Groovy - Functional object oriented PL 
2.Scala
3.Clojure
4.Java 8
5.Kotlin
..............................................................................................

Functional Programming Principles:

1.Function is first class Citizen
2.Higher order Function
3.Pure Function and Immuability
4.Referencial Transperancy
5.Side Effects
.............................................................................................
		  Java-8 Functional Programming principles and implementation
.............................................................................................

Since java is object oriented, we deal with classes,interfaces,objects,methods...

Java introduced FP, via interfaces.....


New Project:
-maven 


How to implement functional Programming in Java 8?

"lambda calculs implemenation in java through interfaces"

Use case of interface :
 -Inheritance
 -To hide many implementation under one single type.
 -inner classes



package com.ibm.fp.interfaces;

public interface Greeter {
    String sayGreet();
}
package com.ibm.fp.interfaces;

public class HaiImpl implements Greeter {
    @Override
    public String sayGreet() {
        return "Hai";
    }
}

package com.ibm.fp.interfaces;

public class HelloImpl implements Greeter {
    @Override
    public String sayGreet() {
        return "Hello";
    }
}
package com.ibm.fp.interfaces;

public class MainApp {
    public static void main(String[] args) {
        Greeter greeter = null;
        //hello
        greeter = new HelloImpl();
        System.out.println(greeter.sayGreet());
        //hai
        greeter = new HaiImpl();
        System.out.println(greeter.sayGreet());
    }
}
Objective: to implement interface and have different greet logic.


1.implement interface with a class , override methods.


What is the problem with above code?

- every time we need to create a separate class, override methods, create object , call methods
- increases lot of implementation classes, which increases code maintainance.

How to reduce code without declaring class?

Solution:

- inner classes.
    a class within a class

Types of inner classes:

1.regular inner class
2.static inner classes
3.method local inner classes
4.anonmous inner classes


Anonmous inner classes:
 -It is call without class itself, still we can override methods and call.
Compiler will provide classes during compile time.
//Anonmous Innerclasses
        greeter = new Greeter() {
            @Override
            public String sayGreet() {
                return "Hello Again";
            }
        };
        System.out.println(greeter.sayGreet());

        greeter = new Greeter() {
            @Override
            public String sayGreet() {
                return "Hai Again";
            }
        };
        System.out.println(greeter.sayGreet());
.............................................................................................
				Functional Programming Principles Implementation
.............................................................................................

1.Function is first class citizen:

  Function(methods) can be assigned to a variable, that variable can be used to invoke function/method latter.

 function is a value like numbers,strings and booleans

 eg:
   int a=10;

  a= is variable
  10 = is value(literal)
 int = is type

 In funcitional programming , function itself is value like 10.

   FunctionType variable = function(){}

   //invoke function
    variable();

Why this Concept?

 -Reducing Code- More readable,Declarative code.

Lambda Expression:

  int a =10 ; this is expression: number expression
  
  FuncitonType variable = ()->{}; --Lamba expression
	|                   |
   interface             lambda 



package com.ibm.fp.lambdas;

public class MainApp {
    public static void main(String[] args) {
        Greeter greeter = null;
        //anonymous inner class style
        greeter = new Greeter() {
            @Override
            public String sayGreet() {
                return "Anonymous function";
            }
        };
        System.out.println(greeter.sayGreet());
        //lambda syntax
        greeter = () -> {
            return "Lambda function";
        };
        System.out.println(greeter.sayGreet());


    }
}
..............................................................................................
				  Functional Interfaces
..............................................................................................

In java, we have interfaces, which are having abstract methods, but all interfaces cant be used as lambda "Functional Interfaces".

Is any difference between functional interface and regular interfaces?


Yes!.

Functional interface features:

->functional interface must have only one abstract method. - SAM - Single Abstract methods.
->functional interface can have other implementation methods - default methods.
->functional interface can have static methods.
->functional interface may be annotated with "@FunctionalInterface".

package com.ibm.fp.lambdas;

public interface Util {
    //abstract methods
    String doStuff();
    String doSomething();
}
package com.ibm.fp.lambdas;

public class LambdaInterfaceMain {
    public static void main(String[] args) {
       //
        Util util;
        util = new Util() {
            @Override
            public String doStuff() {
                return "dostuff";
            }

            @Override
            public String doSomething() {
                return "doSomething";
            }
        };
        //lambda - invalid : only one abstract method allowed
//        util = ()->{
//            return "ddd";
//        };

    }
}

package com.ibm.fp.lambdas;

public interface Function0 {
    //only one abstract method
    void doStuff();
    //implementation method
    default void  doSomething0( ){
        System.out.println("do something -0 ");
    }
    default void  doSomething1( ){
        System.out.println("do something -1");
    }
    //static methods
    static void doProcess(){
        System.out.println("Do Process");
    }
}
package com.ibm.fp.lambdas;

import java.util.function.Function;

public class LambdaInterfaceMain {
    public static void main(String[] args) {
       //
        Util util;
        util = new Util() {
            @Override
            public String doStuff() {
                return "dostuff";
            }

            @Override
            public String doSomething() {
                return "doSomething";
            }
        };
        //lambda - invalid : only one abstract method allowed
//        util = ()->{
//            return "ddd";
//        };
        Function0 function0 = null;
        function0 = ()-> {
            System.out.println("Function 0");
        };
        function0.doStuff();
        function0.doSomething0();
        function0.doSomething1();
        Function0.doProcess();

    }
}

functional interface must have only one abstract method. - SAM - Single Abstract methods.
This is based on "SRP" - Single Responsiblity Principle
..............................................................................................
				@FunctionalInterface annotation

functional interface may be annotated with "@FunctionalInterface".

An informative annotation type used to indicate that an interface type declaration is intended to be a functional interface as defined by the Java Language Specification. Conceptually, a functional interface has exactly one abstract method.

Why this annotation?

-Readability - for documentation purpose.
-To avoid compile error during lambda declaration, compile time error can be dededucted during
 interface declaration itself.
@FunctionalInterface
public interface Greeter {
    static void sayHai() {
        System.out.println("Static Hai method");
    }

    void sayHello();
    // void sayHai();
    //default methods
    default void saySomething() {
        System.out.println("Something !!!");
    }

    default void doSomething() {
        System.out.println("Do something!!");
    }
}
............................................................................................
.............................................................................................
		         Functional interface methods args and Return Type
				
..............................................................................................
package com.ibm.fp.lambdas.args;

@FunctionalInterface
public interface Welcome {
    void sayWelcome();
}

package com.ibm.fp.lambdas.args;

public class ArgsAndParmsMain {
    public static void main(String[] args) {
        //no args ,params
        Welcome welcome = null;
        welcome = () -> {
            System.out.println("Welcome");
        };
        welcome.sayWelcome();

    }
}

.............................................................................................
       Code Refactoring :According FP , you have to reduce code as much as possible 
..............................................................................................

1.if function body has only one line of code.
    -We can remove {}
Welcome welcome = null;
   welcome = welcome = () -> System.out.println("Welcome");
   welcome.sayWelcome();

..........................................................................................
			params and args


Params are values passed from the caller
Args are place holder to recive values.

Params can be any values
 Prmitives - int,char,boolean,double..
 Objects- String,Employee,Order...
 Function - Function as param.

package com.ibm.fp.lambdas.args;

public interface Name {
    //name is arg
    void setName(String name);
}
package com.ibm.fp.lambdas.args;

public class ArgsAndParams {
    public static void main(String[] args) {
        Name name = null;
        //myname is  args
        name = (String myname) -> {
            System.out.println(myname);
        };
        //"Subramanian" is param
        name.setName("Subramanian");
        //code refactoring : remove {}
        name = (String myname) -> System.out.println(myname);
        name.setName("Subramanian");

    }
}
.............

.............................................................................................
				  Type Inference
............................................................................................

In the arg here we have string

   myname = (String name)->{
            System.out.println(name);
   };
 myname.setName("Subramanian");

We can remove the "Type", that means it understood by default based on interface type: Type interfence.

    myname = (name) -> System.out.println(name);
        //"Subramanian" - params
    myname.setName("Subramanian");

We can remove () , if there is no type and if there is only one arg
    myname = name -> System.out.println(name);
        //"Subramanian" - params
        myname.setName("Subramanian");
..............................................................................................
..............................................................................................
				More than One params


package com.cts.fp.params;

@FunctionalInterface
public interface Adder {
    void add(int a, int b);
}


    //two args
        Adder adder = null;

        adder = (int a, int b) -> {
            int c = a + b;
            System.out.println("Add " + c);
        };
        adder.add(10, 10);
        adder = (a, b) -> {
            int c = a + b;
            System.out.println("Add " + c);
        };
        adder.add(10, 10);
..............................................................................................
				Object Types
.............................................................................................
package com.ibm.fp.lambdas.args;

@FunctionalInterface
public interface Logger{
    void log(Log log);
}


  //object args
        Logger loggerService = null;

        loggerService = (Log logger) -> {
            logger.info("Something new");
        };
        loggerService.log(new Log());

        loggerService = logger -> {
            logger.info("Something new");
        };
        loggerService.log(new Log());

...........................................................................................................................................................................................
				Return Values
................................................................................	...........


package com.ibm.fp.lambdas.returns;

@FunctionalInterface
public interface Adder {
    int add(int a, int b);
}
package com.ibm.fp.lambdas.returns;

public class ReturnsMain {
    public static void main(String[] args) {
        Adder adder = null;
        adder = (a, b) -> {
            return a + b;
        };
        System.out.println(adder.add(10, 10));
        //if there is only return statemment, we can remove {} and return statement.
        adder = (a, b) -> a + b;
        System.out.println(adder.add(10, 10));
    }
}
.............................................................................................
				 Higher Order Function
.............................................................................................


-Functions are first class citizen.

First class Citizen: (special):

- functions are passed around .(in,out)

This means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures

functions are literals , means values like int,double,string

  int  a =10;(literal)

  val myjob = fun doStuff(){}
 
Java 8 functions are first class -  which means that they can be storedd in variables and ds,passed as arg to and return from other functions.


Higer order function:

First-class functions are a necessity for the functional programming style, in which the use of higher-order functions is a standard practice. 


In mathematics and computer science, a higher-order function is a function that does at least one of the following:

->takes one or more functions as arguments,
->returns a function as its result.

Can i say this fun is Higher order fun?

Object map(){

}

Ans: No because it does not follow the thumb rule of higher order function.

Since Java static typed language, we need to tell type of "function" itself

Object  map(FunctionType myvar){

}


Object  map(FunctionalInterface myvar){

}

int a =10;
     
a=variable
int=type - Interface-FunctionalInterface
10=value -function as value   

Note: Function Type itself is Object only behind the scnene.

.............................................................................................package com.ibm.fp.lambdas.higherorderfun;

@FunctionalInterface
public interface Greeter {
    void sayHello();
}
package com.ibm.fp.lambdas.higherorderfun;

public class Hello {
    //Higher order funciton
    public void sayHello(Greeter greeter){
        greeter.sayHello();
    }
}
package com.ibm.fp.lambdas.higherorderfun;

public class HigherOrderMain {
    public static void main(String[] args) {
        Hello hello = new Hello();
        //passing function as parameter
        hello.sayHello(new Greeter() {
            @Override
            public void sayHello() {
                System.out.println("Hello");
            }
        });
        //lambda; function as parameter
        hello.sayHello(() -> System.out.println("Hello Lambda"));

    }
}
...........................................................................................
				Higher order function with params and args
...........................................................................................
package com.ibm.fp.lambdas.higherorderfun;

@FunctionalInterface
interface Handler {
    //this is function
    void handle();
}

package com.ibm.fp.lambdas.higherorderfun;

class Socket {
    //receive function as parameter
    public void requestHandler(Handler handler) {
        handler.handle();
    }
}



package com.ibm.fp.lambdas.higherorderfun;

public class HigherOrderMain {
    public static void main(String[] args) {
        Hello hello = new Hello();
        //passing function as parameter
        hello.sayHello(new Greeter() {
            @Override
            public void sayHello() {
                System.out.println("Hello");
            }
        });
        //lambda; function as parameter
        hello.sayHello(() -> System.out.println("Hello Lambda"));

    }
}
....................................................................................

package com.ibm.fp.lambdas.higherorderfun;

@FunctionalInterface
interface HttpHandler<T> {
    void handle(T payload);
}

package com.ibm.fp.lambdas.higherorderfun;

public class HttpServer {
    //higher order function
    public void startServer(HttpHandler<String> handler) {
        handler.handle("HTTP Server");
    }
}

package com.ibm.fp.lambdas.higherorderfun;


public class HigherOrderMainAdvanced {
    public static void main(String[] args) {
        Socket socket = new Socket();
        socket.requestHandler(() -> System.out.println("Socket handler"));
        //
        HttpServer httpServer = new HttpServer();
        httpServer.startServer(response -> System.out.println(response));
    }
}
.............................................................................................
  How to pass multiple function as parameter and how invoke function based on some biz logic?
.............................................................................................

package com.ibm.fp.lambdas.higherorderfun;

@FunctionalInterface
public interface Resolve {
    void resolve(String success);
}
package com.ibm.fp.lambdas.higherorderfun;

@FunctionalInterface
public interface Reject {
    void reject(Throwable error);
}
package com.ibm.fp.lambdas.higherorderfun;

public class Auth {
    //higher order
    void login(String userName, String password, Resolve success, Reject fail) {
        //biz logic
        if (userName.equals("admin") && password.equals("admin")) {
            success.resolve("Login Success");
        } else {
            fail.reject(new RuntimeException("Login Failed"));
        }
    }
}

main method
   //login
        Auth auth = new Auth();
        auth.login("admin", "admin", response -> System.out.println(response), error -> {
            System.out.println(error.getMessage());
        });
        auth.login("foo", "bar", response -> System.out.println(response), error -> {
            System.out.println(error.getMessage());
            //error.printStackTrace();
        });
..............................................................................................
..............................................................................................
				Common Functional Interfaces
.............................................................................................	

How to reduce functional interfaces itself?

if you want to implement lambda, you need functional interface.

Lets i want to design common interfaces which accepts and returns

-single input, no output
-two input , single output
-only integer input,return the same
-two any type of input,return boolean ; predicate
etc...
do you think that it is good idea to have your own functional interfaces for
common uses cases
No!

Java 8 provides built in functional interfaces.

Java 8 has changed many built in interfaces as functional interface, where ever interface having single methods.


eg:
 java.lang.Runnable 


package com.ibm.fp.interfaces.builtin;

public class ThreadImpl {
    public static void main(String[] args) {
        Runnable target = () -> System.out.println(Thread.currentThread().getName());
        Thread thread = new Thread(target);
        thread.start();

        Thread thread1 = new Thread(()-> System.out.println(Thread.currentThread().getName()));
        thread1.start();
    }
}

package com.ibm.fp.interfaces.builtin;

import java.util.function.*;

public class UtilityFunctions {
    public static void main(String[] args) {
        //Supplier
        Supplier<String> stringSupplier = () -> "Hello";
        System.out.println(stringSupplier.get());
        //return only int
        IntSupplier intSupplier = () -> 100;
        System.out.println(intSupplier.getAsInt());

        Predicate<Integer> predicate = number -> number > 10;
        System.out.println(predicate.test(100));
        System.out.println(predicate.test(1));

        Function<String, String> function = input -> input;
        System.out.println(function.apply("Hello"));


        //Bi -two
        BiPredicate<Integer, Integer> biPredicate = (a, b) -> a > b;
        System.out.println(biPredicate.test(10,20));
    }
}

............................................................................................
				  Functional Composition
............................................................................................

Function composition looks object composition in java.

What is Function Composition?
	Functional COmposition is a technique to coimbine multiple functions into a single function which uses combined functionality.
       Built in java functional interfaces provides an ability to chain the functions.


package com.ibm.fp.interfaces.builtin;

import java.util.function.Predicate;

public class FunctionComposition {
    public static void main(String[] args) {
        Predicate<String> startsWith = text -> text.startsWith("A");
        Predicate<String> endsWith = text -> text.endsWith("x");
        //coimbine startsAndendsWith
        //coimbine with && Operator : which is not readable,looks like imperative
        // Predicate<String> startsWithAndEndsWith = text -> startsWith.test(text) && endsWith.test(text);
        //declarative using and mehtod
        Predicate<String> startsWithAndEndsWith = startsWith.and(endsWith);
        boolean result = startsWithAndEndsWith.test("A hardworking person must relax");
        if (result) {
            System.out.println("Text Starts With A and Ends with e");
        } else {
            System.out.println("No Match found");

        }
        //
        Predicate<String> composedOR = startsWith.or(startsWithAndEndsWith);
        String matchFound = composedOR.test("Hello how are you") ? "Match found" : "Match Not Found";
        System.out.println(matchFound);
    }
}
..............................................................................................
package com.ibm.fp.interfaces.builtin;

import java.util.function.Function;

public class AdvancedFunctionComposition {
    public static void main(String[] args) {
        Function<Integer, Integer> multiplyByTwo = value -> value * 2;

        Function<Integer, Integer> addByThree = value -> value + 3;

        //compose execute the methods right to left // 10+3 =13 = 13 *2 =26
        Function<Integer, Integer> addThenMultiply = multiplyByTwo.compose(addByThree);
        System.out.println(addThenMultiply.apply(10));

        //andThen execute the methods left to right
        Function<Integer, Integer> multiplyAndAdd = multiplyByTwo.andThen(addByThree);
        System.out.println(multiplyAndAdd.apply(10));
    }
}
............................................................................................
				Method References
............................................................................................



->It is technique to reduce lot of lambda code itself.

method references:
  ::

Types of method refences:

1.instance method as reference 
     - this::methodName
2.static method as reference
    - ClassName::methodName
3.constructor as reference.
    new::constructor

package com.ibm.fp.methodreference;

@FunctionalInterface
interface Welcome {
    void sayWelcome(String message);
}

package com.ibm.fp.methodreference;


@FunctionalInterface
interface UpperCase {
    String convertToUpper(String message);
}

package com.ibm.fp.methodreference;

public class MethodReferenceBasic {
    public static void main(String[] args) {
        Welcome welcome = null;
        //get input and print it
        welcome = name -> System.out.println(name);
        welcome.sayWelcome("Subramanian");
        //using method reference
        welcome = System.out::println;
        welcome.sayWelcome("Subramanian");
        //Upper case
        UpperCase upperCase = null;
        upperCase = name -> name.toUpperCase();
        System.out.println(upperCase.convertToUpper("subramanian"));
        upperCase = String::toUpperCase;
        System.out.println(upperCase.convertToUpper("subramanian"));
    }
}
............................................................................................
				methodReference : instance method,static method ,constructors
............................................................................................

package com.ibm.fp.methodreference;

//
class MicroTask {
    public static void startMicroTaskV2() {
        System.out.println(Thread.currentThread().getName());
    }

    public void startMicroTask() {
        System.out.println(Thread.currentThread().getName());
    }
}

class Task {
    private void process() {
        System.out.println(Thread.currentThread().getName());
    }

    public void startTask() {
        Thread thread = null;
        //anonymous inner class
        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println(Thread.currentThread().getName());
            }
        });
        thread.start();
        //lambda
        thread = new Thread(() -> System.out.println(Thread.currentThread().getName()));
        thread.start();
        //lambda logic into separate method
        thread = new Thread(() -> {
            this.process();
        });
        thread.start();

        //lambda logic into separate method but how to reduce lambda expression
        thread = new Thread(this::process);
        thread.start();

        //lambda logic into separate class
        MicroTask microTask = new MicroTask();
        thread = new Thread(() -> {
            microTask.startMicroTask();
        });
        thread.start();

        //lambda logic into separate class
        thread = new Thread(microTask::startMicroTask);
        thread.start();

        //lambda logic into separate class
        thread = new Thread(MicroTask::startMicroTaskV2);
        thread.start();

    }
}


public class AdvancedMethodReference {
    public static void main(String[] args) {
        Task task = new Task();
        task.startTask();
    }
}
.............................................................................................
			Built in functional interfaces and how to use method reference


import java.util.function.BiFunction;
import java.util.function.Supplier;

@FunctionalInterface
interface InventoryProcessor {
    String process(boolean isStockAvailable);
}

class Calculator {
    public static int add(int a, int b) {
        return a + b;
    }

    public int subtract(int a, int b) {
        return a - b;
    }
}

class OrderService {
    public boolean isStockAvailable() {
        return true;
    }
}

class InventoryService {

    public void updateInventor(InventoryProcessor processor) {
        System.out.println(processor.process(true));
    }
}

public class BuiltinFunctionalInterface {
    public static void main(String[] args) {
        BiFunction<Integer, Integer, Integer> adder = Calculator::add;
        System.out.println(adder.apply(10, 10));

        Calculator calculator = new Calculator();

        BiFunction<Integer, Integer, Integer> subtracter = (a, b) -> calculator.subtract(a, b);
        System.out.println(subtracter.apply(10, 2));
        BiFunction<Integer, Integer, Integer> subtracterMethodRef = calculator::subtract;
        System.out.println(subtracterMethodRef.apply(10, 2));

        OrderService orderService = new OrderService();
        Supplier<Boolean> orderSupplier = null;
        orderSupplier = () -> orderService.isStockAvailable();
        System.out.println(orderSupplier.get());
        orderSupplier = orderService::isStockAvailable;
        System.out.println(orderSupplier.get());

        InventoryService inventoryService = new InventoryService();
        inventoryService.updateInventor(res -> {
            return "Inventory processed" + res;
        });
        inventoryService.updateInventor(BuiltinFunctionalInterface::process);
    }
    private static String process(boolean res) {
        return "Inventory processed" + res;
    }
}
............................................................................................
					Constructors
.............................................................................................


package com.ibm.fp.methodreference;

class Hello {
    private String message;

    //no arg constructor
    public Hello() {

    }
    //single arg
    public Hello(String message) {
        this.message = message;
        System.out.println(this.message);
    }

    public String getMessage() {
        return message;
    }
}
package com.ibm.fp.methodreference;

public class ConstructorMethodReference {
    public static void main(String[] args) {
        Greeter hello = Hello::new;
        System.out.println(hello.sayHello("Hello"));
    }
}
........................................XXXXXXXXXXX...........................................








