                                     Vertx
..............................................................................................
                        Eclipse Vert.xâ„¢ Reactive applications on the JVM
..............................................................................................

                       Blocking ,Non Blocking,MultiThreading,Async Programming
			        IO - Blocking IO,NonBlocking IO 
..............................................................................................

Operating system layers

1.userspace

2.kernal space


What is file Descriptor?

 -It is data structure - located inside kernal
 -It is created per process for eg for jvm , there will be one file descriptor.

Why file descriptor?
  
  Which is the bridge between application process and hardware layer.

Application process - could be any runtime - jvm,clr,anyruntime
............................................................................................
  
Two types of api

1.high level api - java api
 
FileInputStream fs = new FileInputStream(new File("foo.txt"));

somecode
while((char c=rs.read()) {
   print c;
}
some code

2.low level api - c

System call - os call
  read()

.............................................................................................

Blocking IO: 

 The application cant do any process until io operation is completed

while((char c=rs.read()) {
   print c;
}
some code
 here blocking io code, "some code" will not run until while loop terminates : Blocking IO
............................................................................................
		 Networking and Blocking IO - Traditional Web Server working pattern
.............................................................................................

Request per thread - for every request a new thread is created.

1000 request = 1000 threads

This arch introduced in 1995.

Draback of request per thread model.

In 2000, the problem was identifed----more request more thread

When a thread is created
 - it requires some memory
 - if thread is not in use for some time, cpu will put the thread in sleep state
    if data ready, the os will put thread in active state  :Ctx switch.

C10K Problem

linux apis

 blocking api              non blocking api(2000)
  read                       select


Non blocking socket api

select - to return control from the fsd
read -- to read ready data  from the kernal buffer.

Second generation

poll---------------------------------|
    |---------------------------------|

Third generation :

 epoll
..............................................................................................
				  Vertx Programming
..............................................................................................

Vertx core idea:

Building non blocking , Reactive network io applications

1.web application
  RESTFull WebServices


Vertx is collection of modules 

vertx-core
vertx-web
vertx-data
vertx-microservices
.........

Core Concepts:

1.Vertx Engine
    Object , where vertx apps are running

2.Verticle
   Object, which represent vertx application components.

3.EventBus
    
..............................................&&&&&&&&&&&&&&&&&.............................


How to setup vertx project

vertx supports

1.maven
2.gradle

project can be simple 

1.normal java project
2.standard mvn project
3.vertx project from https://start.vertx.io/
..............................................................................................

How to run vertx project:

Dev mode
  mvn compile exec:java

Production mode
 java -jar target/vertx-gettingstarted-1.0.0-SNAPSHOT-fat.jar
.........................................................................................

What you can do with vertx?
 Any non blocking applications -network based apps -  http,tcp,udp,datagram

package :  io.vertx.core

io.vertx.core
Interface Vertx 
   
Which represents Vertx engine.

Vertx instance can do 

Creating TCP clients and servers
Creating HTTP clients and servers
Creating DNS clients
Creating Datagram sockets
Setting and cancelling periodic and one-shot timers
Getting a reference to the event bus API
Getting a reference to the file system API
Getting a reference to the shared data API
Deploying and undeploying verticles
.............................................................................................

Coding style

1.Vertx apps can be written in regular java program
2.Vertx apps can be written inside verticle


package com.ibm.vertx.core;

import io.vertx.core.Vertx;

public class HelloWorldApp {
  public static void main(String[] args) {
    System.out.println("Vertx Starts");
    //Get the Reference of Vertx Engine
    Vertx myVertx = Vertx.vertx();
    //create some http server
    myVertx.createHttpServer()
      .requestHandler(httpServerRequest -> httpServerRequest.response().end("Hello")).listen(8080);
  }
}
.............................................................................................
vertx-core:

-Verticles
-Event loop Threads
-Callback based programming
					

Verticle:
  -It is java object
  -It can be deployed and undeployed on vertx instance (engine).
  -It is based on design pattern called "Actor-like Model" - based on akka frameworks
  -Verticles are bound to "Event loop thread" , are processed by event loop threads.

Verticle is interface which provides life cycle methods 
  -init
  -start - called when verticle during deployment
  -stop  - called when verticles during undeployment

public HelloWorld{

}
 new HelloWorld();

Servlet class
public HelloWorld extends HttpServlet {
   doGet(){}
   doPost(){}
}
// new HelloWorld()
Who creates servlet object?
 -container

-create object
   -constructor
-add servlet behaviour :deployment
  -Attach life cycle methods - init...destory

--listens for request

-when req arrvied - create a thread and attaches that thread , handle requests
.............................................................................................
				 Vertx initailzation Process
...............................................................................................

1.when you run java app
                                   
2.vertx engine initalized
    -Thread creations
  -Event loop threads
    which is for non blocking network 
   io operations
   -how many based on cpu core
  -Worker pool threads
    -cpu instensive task
    -blocking operations

  -memory allocation
  .....
3.Verticle deployment
   Deployment means allocating
 resources(binding threads)
 By default all verticles are bound
 with event loop threads

				      .....................
					  V1 ,V2,V3......
				  ..      | .........................           

					  T1.T2,T3, W1,W2,W3,W4
                                         Vertx Engine Initalized
					.....................
						JVM 
.............................................................................................

Steps:

1.write verticle

2.deploy the verticle

 -via launcher
 -via code 



import io.vertx.core.AbstractVerticle;

public class GreeterVerticle extends AbstractVerticle {
  //life cycle methods

  @Override
  public void start() throws Exception {
    super.start();
    System.out.println("Greeter verticle is deployed");
  }

  @Override
  public void stop() throws Exception {
    super.stop();
  }
}

how to deploy ?

 -via launcher
  main class and method provided by vertx 

pom.xml
<main.verticle>com.ibm.vertx.core.GreeterVerticle</main.verticle>
<launcher.class>io.vertx.core.Launcher</launcher.class>

via :
package com.ibm.vertx.core;

import io.vertx.core.Vertx;
import io.vertx.example.util.Runner;

public class GreeterDeployer {
  public static void main(String[] args) {
    Vertx vertx = Vertx.vertx();
    vertx.deployVerticle(new GreeterVerticle());
    vertx.deployVerticle(GreeterVerticle.class.getName());
    vertx.deployVerticle("com.ibm.vertx.core.GreeterVerticle");
    Runner.runExample(GreeterVerticle.class);

  }
}
..............................................................................................
				   Vertx-core apis
..............................................................................................


Vertx programming style

1.callback based
2.reactive based

Non blocking apis
1.timer
2.http
3.fs


Future: success,failure

package com.ibm.vertx.core.callbacks;

import io.vertx.core.AbstractVerticle;

public class GreeterVerticle extends AbstractVerticle {
  private GreeterService greeterService = new GreeterService();

  private void sayHello() {
    //onComplete
    greeterService.sayHello().onComplete(asyncResult -> {
      if (asyncResult.succeeded()) {
        System.out.println(asyncResult.result());
      } else {
        System.out.println(asyncResult.cause());
      }
    });
    //onSuccess
//        greeterService.sayHello().onSuccess(result-> System.out.println(result));
    //fluent pattern/builder pattern
    greeterService.sayHello().onSuccess(System.out::println).onFailure(System.out::println);
  }

  private void sayError() {
    greeterService.sayError().onComplete(asyncResult -> {
      if (asyncResult.succeeded()) {
        System.out.println(asyncResult.result());
      } else {
        System.out.println(asyncResult.cause());
      }
    });
    greeterService.sayError().onSuccess(System.out::println).onFailure(System.out::println);

  }

  private void sayGreet() {
    greeterService.sayGreet("Subramanian")
      .onSuccess(System.out::println)
      .onFailure(System.out::println);
    greeterService.sayGreet("foo")
      .onSuccess(System.out::println)
      .onFailure(System.out::println);
  }

  @Override
  public void start() throws Exception {
    super.start();
    //this.sayHello();
    //  this.sayError();
    this.sayGreet();

  }
}
package com.ibm.vertx.core.callbacks;

import io.vertx.core.Future;

public class GreeterService {

  //apis
  public Future<String> sayHello() {
    return Future.future(asyncHandler -> {
      //encapsulate data
      asyncHandler.complete("Hello");
    });
  }

  //returning future with Error
  public Future<String> sayError() {
    return Future.future(asyncHandler -> {
      //encapsulate data
      asyncHandler.fail(new RuntimeException("Something went wrong!!!"));
    });
  }

  //biz logic
  public Future<String> sayGreet(String name) {
    return Future.future(asyncHandler -> {
      //biz logic
      if (name.equals("Subramanian")) {
        asyncHandler.complete("Greet " + name);
      } else {
        asyncHandler.fail(new RuntimeException("Name Match Not found "));
      }
    });
  }


}
.........................................................................................
				Callback chaining


package com.ibm.vertx.core.callbacks;

import io.vertx.core.Future;

public class UserService {

  public Future<String> getUser() {
    // write biz logic
    String user = null;
    if (user != null) {
      return Future.succeededFuture(user);
    }
    return Future.failedFuture(new RuntimeException("User Not Found"));
  }

  public Future<String> login(String user) {
    // write biz logic
    if (user.equals("admin")) {
      return Future.succeededFuture("login success");
    }
    return Future.failedFuture(new RuntimeException("login Failed"));
  }

  public Future<String> showDashBoard(String status) {
    // write biz logic
    if (status.equals("login success")) {
      return Future.succeededFuture("You are admin");
    }
    return Future.failedFuture("You are guest");
  }

}

package com.ibm.vertx.core.callbacks;

import io.vertx.core.AbstractVerticle;

public class UserVerticle extends AbstractVerticle {
  private UserService userService = new UserService();

  @Override
  public void start() throws Exception {
    super.start();
    userService.getUser().onComplete(asyncResult -> {
      if (asyncResult.succeeded()) {
        //call another api incase if user found
        userService.login(asyncResult.result().toString()).onComplete(loginasyncResult -> {
          if (loginasyncResult.succeeded()) {
            //call another api in case login is success
            userService.showDashBoard(loginasyncResult.result()).onComplete(dashboardRes -> {
              if (dashboardRes.succeeded()) {
                System.out.println(dashboardRes.result());
              } else {
                System.out.println(dashboardRes.cause());
              }
            });
          } else {
            System.out.println(loginasyncResult.cause());
          }
        });
      } else {
        System.out.println(asyncResult.cause());
      }
    });
  }
}
.............................................................................................
			   Callback Hell
..............................................................................................

getUser().onComplete(event -> {
      if (event.succeeded()) {
        login(event.result()).onComplete(loginEvent -> {
          if (loginEvent.succeeded()) {
            System.out.println(loginEvent.result());
            //call show page
            showpage(loginEvent.result()).onComplete(pageEvent -> {
              if (pageEvent.succeeded()) {
                System.out.println(pageEvent.result());
              } else {
                System.out.println(pageEvent.cause());
              }
            });
          } else {
            System.out.println(loginEvent.cause());
          }
        });
      } else {
        System.out.println(event.cause());
      }
    });


Look at the above code , ask your self

1.is it easy to understand?
2.is it easy to scale
3.is it easy to maintain

No!

This is called callback hell; The callback hell is way of writing complex callbacks.

can we escape from callback hell problem, how to write better callback based programming?

Yes! 
............................................................................................
					Solution is 
				Future.compose Method
.............................................................................................

package com.ibm.vertx.core.callbacks;

import io.vertx.core.Future;

public class UserService {

  public Future<String> getUser() {
    System.out.println("----Get User is called----");
    // write biz logic
    String user = "admin";
    if (user != null) {
      return Future.succeededFuture(user);
    }
    return Future.failedFuture(new RuntimeException("User Not Found"));
  }

  public Future<String> login(String user) {
    System.out.println("----login  is called----");

    // write biz logic
    if (user.equals("admin")) {
      return Future.succeededFuture("login success");
    }
    return Future.failedFuture(new RuntimeException("login Failed"));
  }

  public Future<String> showDashBoard(String status) {
    System.out.println("----showDashBoard is called----");

    // write biz logic
    if (status.equals("login success")) {
      return Future.succeededFuture("You are admin");
    }
    return Future.failedFuture("You are guest");
  }

}


package com.ibm.vertx.core.callbacks;

import io.vertx.core.AbstractVerticle;

public class UserVerticle extends AbstractVerticle {
  private UserService userService = new UserService();

  private void callbackChaining() {
    userService.getUser().onComplete(asyncResult -> {
      if (asyncResult.succeeded()) {
        //call another api incase if user found
        userService.login(asyncResult.result().toString()).onComplete(loginasyncResult -> {
          if (loginasyncResult.succeeded()) {
            //call another api in case login is success
            userService.showDashBoard(loginasyncResult.result()).onComplete(dashboardRes -> {
              if (dashboardRes.succeeded()) {
                System.out.println(dashboardRes.result());
              } else {
                System.out.println(dashboardRes.cause());
              }
            });
          } else {
            System.out.println(loginasyncResult.cause());
          }
        });
      } else {
        System.out.println(asyncResult.cause());
      }
    });
  }

  private void callbacksUsingCompose() {
    //compose ; based function composition
    userService.getUser()
      .compose(user -> {
        return userService.login(user);
      })
      .compose(status -> {
        return userService.showDashBoard(status);
      })
      .onSuccess(System.out::println)
      .onFailure(System.out::println);
    //simplifed version
    userService.getUser()
      .compose(user -> userService.login(user))
      .compose(status -> userService.showDashBoard(status))
      .onSuccess(System.out::println)
      .onFailure(System.out::println);

    //method reference
    userService.getUser()
      .compose(userService::login)
      .compose(userService::showDashBoard)
      .onSuccess(System.out::println)
      .onFailure(System.out::println);
  }

  @Override
  public void start() throws Exception {
    super.start();
    callbacksUsingCompose();
  }
}
..............................................................................................

.............................................................................................
				Advanced Composition
.............................................................................................

i have three methods

-startDbServer
-startHttpServer
-startConfigServer

After success of all methods only i have to initalize my app, if any one of the server failed
i have to throw error and stop .

Future Coordination:
 Coordination of mutliple futures can be accieved with Vertx futures.

Supports concurrent composition(run serveral async operations in paralle) and sequential composition -chain async operations.

CompositeFuture.all(f1,f2,f3,f4,f5,f6)

-all composition waits until all futures are successful or any one fails.

CompositeFuture.any(f1,f2,f3,f4,f5,f6)
    any composition waits for the succeeded future.
package com.ibm.vertx.core.callbacks;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.CompositeFuture;
import io.vertx.core.Future;

public class AppVerticle extends AbstractVerticle {
  private AppInitService initService = new AppInitService();

  @Override
  public void start() throws Exception {
    super.start();
    //coordinate all futures
    Future<String> dbServer = initService.startDbServer();
    Future<String> webServer = initService.startWebServer();
    Future<String> configServer = initService.startConfigServer();

    CompositeFuture.all(dbServer, webServer, configServer).onComplete(ready -> {
      if (ready.succeeded()) {
        System.out.println(ready.result());
        System.out.println("All servers are up! App is being inialized");
      } else {
        System.out.println(ready.cause().getMessage());
      }
    });
    System.out.println("CompositeFuture.any");
    CompositeFuture.any(dbServer, webServer, configServer).onComplete(ready -> {
      if (ready.succeeded()) {
        System.out.println(ready.result());
        System.out.println("All servers are up! App is being inialized");
      } else {
        System.out.println(ready.cause().getMessage());
      }
    });
  }
}
package com.ibm.vertx.core.callbacks;

import io.vertx.core.Future;

public class AppInitService {

  //start db server
  public Future<String> startDbServer() {
    System.out.println("Db Server Started");
    return Future.succeededFuture("Db server is up");
  }

  //start http server
  public Future<String> startWebServer() {
    System.out.println("WebServer Server Started");
    //return Future.succeededFuture("Web server is up");
    return Future.failedFuture("Port is already In Use");
  }

  //start config server
  public Future<String> startConfigServer() {
    System.out.println("Config Server Started");
    return Future.succeededFuture("Config Server is up");
  }
}
..................................................................................................
			  compose vs ComositeFuture.all/any

compose is sequencial
compositeFuture is parallel
..............................................................................................	
  CompositeFuture.any(dbServer, webServer, configServer).onComplete(ready -> {
      if (ready.succeeded()) {
        System.out.println(ready.result());
        System.out.println("All servers are up! App is being inialized");
      } else {
        System.out.println(ready.cause().getMessage());
      }
    });
look the previous code
............................................................................................
..............................................................................................				 Passing function as parameter-Higher Order function
............................................................................................

What if i dont return Future?

public Future<String> startDbServer() {
    System.out.println("Db Server Started");
    return Future.succeededFuture("Db server is up");
}

public void startDbServer(){
    //how to encapsulate data into future and send it back to caller
}


Syntax:

public void startDbServer(Handler<AsyncResult<String>> aHandler){
    //how to encapsulate data into future and send it back to caller
	aHandler.handle(Future.succeededFuture("callback"));
}

startDbServer(ar->{})

package com.ibm.vertx.core.callbacks;

import io.vertx.core.AbstractVerticle;

public class HigherOrderVerticle extends AbstractVerticle {
  private HigherOrderFutureService higherOrderFutureService = new HigherOrderFutureService();

  @Override
  public void start() throws Exception {
    super.start();
    //passing function as parameter
    higherOrderFutureService.startServer(asyncResult -> {
      if (asyncResult.succeeded()) {
        System.out.println(asyncResult.result());
      }
    });
  }
}

package com.ibm.vertx.core.callbacks;

import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;

public class HigherOrderFutureService {

  //higher order function
  public void startServer(Handler<AsyncResult<String>> aHandler) {
    aHandler.handle(Future.succeededFuture("callback"));
  }
}
............................................................
..............................................................................................
					Promises
.............................................................................................

Promises:

Async Wrapper Object : Promise:
...............................

Promise is async abstraction largly promoted by javascript community.

Dont Compare  javascript Promises with Vertx Promises , because both are different.

Promise is "semantically meaningfull abstraction" for handling asyn results.

Many times developers confuse with java Future and Vertx Future.

Promises can't be processed directly with onComplete/setHandler/OnSuccecc/onFailure apis.

Promises must be converted into Future before processing.
package com.ibm.vertx.core.callbacks;

import io.vertx.core.AbstractVerticle;

public class PromiseVerticle extends AbstractVerticle {
  private PromiseService promiseService = new PromiseService();
  @Override
  public void start() throws Exception {
    super.start();
    //convert promise into future
    promiseService.login().future().onSuccess(System.out::println);
  }
}
package com.ibm.vertx.core.callbacks;

import io.vertx.core.Promise;

public class PromiseService {

  public Promise<String> login(){
    String username = "admin";
    String password = "admin";
    Promise promise = Promise.promise();
    if (username.equals("admin") && password.equals("admin")) {
      promise.complete("login success");
    } else {
      promise.fail("Login failed");
    }
    return promise;
  }
}
....................................&&&&&&&&&&&&&&&&&&&.....................................
